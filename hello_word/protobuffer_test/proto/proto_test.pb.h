// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_test.proto

#ifndef PROTOBUF_proto_5ftest_2eproto__INCLUDED
#define PROTOBUF_proto_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto_test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5ftest_2eproto();
void protobuf_AssignDesc_proto_5ftest_2eproto();
void protobuf_ShutdownFile_proto_5ftest_2eproto();

class course;
class student;

// ===================================================================

class course : public ::google::protobuf::Message {
 public:
  course();
  virtual ~course();

  course(const course& from);

  inline course& operator=(const course& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const course& default_instance();

  void Swap(course* other);

  // implements Message ----------------------------------------------

  course* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const course& from);
  void MergeFrom(const course& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_test.course)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5ftest_2eproto();
  friend void protobuf_AssignDesc_proto_5ftest_2eproto();
  friend void protobuf_ShutdownFile_proto_5ftest_2eproto();

  void InitAsDefaultInstance();
  static course* default_instance_;
};
// -------------------------------------------------------------------

class student : public ::google::protobuf::Message {
 public:
  student();
  virtual ~student();

  student(const student& from);

  inline student& operator=(const student& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const student& default_instance();

  void Swap(student* other);

  // implements Message ----------------------------------------------

  student* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const student& from);
  void MergeFrom(const student& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // repeated .proto_test.course score = 3;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline const ::proto_test::course& score(int index) const;
  inline ::proto_test::course* mutable_score(int index);
  inline ::proto_test::course* add_score();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_test::course >&
      score() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_test::course >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto_test.student)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::proto_test::course > score_;
  ::google::protobuf::int32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5ftest_2eproto();
  friend void protobuf_AssignDesc_proto_5ftest_2eproto();
  friend void protobuf_ShutdownFile_proto_5ftest_2eproto();

  void InitAsDefaultInstance();
  static student* default_instance_;
};
// ===================================================================


// ===================================================================

// course

// optional string name = 1;
inline bool course::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void course::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void course::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void course::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& course::name() const {
  return *name_;
}
inline void course::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void course::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void course::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* course::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* course::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void course::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 score = 2;
inline bool course::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void course::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void course::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void course::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 course::score() const {
  return score_;
}
inline void course::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// student

// optional string name = 1;
inline bool student::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void student::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void student::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void student::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& student::name() const {
  return *name_;
}
inline void student::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void student::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void student::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* student::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* student::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void student::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 age = 2;
inline bool student::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void student::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void student::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void student::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 student::age() const {
  return age_;
}
inline void student::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// repeated .proto_test.course score = 3;
inline int student::score_size() const {
  return score_.size();
}
inline void student::clear_score() {
  score_.Clear();
}
inline const ::proto_test::course& student::score(int index) const {
  return score_.Get(index);
}
inline ::proto_test::course* student::mutable_score(int index) {
  return score_.Mutable(index);
}
inline ::proto_test::course* student::add_score() {
  return score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_test::course >&
student::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_test::course >*
student::mutable_score() {
  return &score_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5ftest_2eproto__INCLUDED
